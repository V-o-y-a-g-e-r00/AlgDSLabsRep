#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define SIZE 6
int main()
{
  int a[SIZE][SIZE]; // матрица связей //Матрица весов ребер
  int d[SIZE]; // минимальное расстояние //Массив с весами вершин, где вес вершины - это минимальное расстояние от нее от стартовой вершины
  int v[SIZE]; // посещенные вершины //Массив со статусом вершин(можно сказать, с цветом вершин), 1 не посещена
  
  int temp; //Используется при инициализации матрицы весов ребер и не только
  int minindex, min;
  int begin_index = 0;

/*Инициализация и вывод матрицы весов ребер*/
    // Инициализация матрицы связей
    for (int i = 0; i<SIZE; i++)
    {
        a[i][i] = 0;
        for (int j = i + 1; j<SIZE; j++) {
        printf("Введите расстояние %d - %d: ", i, j); //счет с 0
        scanf("%d", &temp);
        a[i][j] = temp;
        a[j][i] = temp;
        }
    }
    // Вывод матрицы связей
    for (int i = 0; i<SIZE; i++)
    {
        for (int j = 0; j<SIZE; j++)
        printf("%5d ", a[i][j]);
        printf("\n");
    }



    //Инициализация вершин и расстояний
    for (int i = 0; i<SIZE; i++)
    {
        d[i] = 10000;
        v[i] = 1;
    }
    d[begin_index] = 0;
    // Шаг алгоритма
    do
    {
        /*  Поиск вершины с минимальным весом*/
        minindex = 10000;
        min = 10000;
        for (int i = 0; i<SIZE; i++)
        { 
            if ((v[i] == 1) && (d[i]<min)) //Если вершину ещё не обошли и вес меньше min
            { // Переприсваиваем значения
                min = d[i];
                minindex = i;
            }
        }

        /*Обход соседей(вершин) из выбранной вершины*/
        // Добавляем найденный минимальный вес
        // к текущему весу вершины
        // и сравниваем с текущим минимальным весом вершины
        if (minindex != 10000)
        {
            for (int i = 0; i<SIZE; i++)
            {
                if (a[minindex][i] > 0)
                {
                    temp = min + a[minindex][i];
                    if (temp < d[i])
                    {
                        d[i] = temp;
                    }
                }
            }
            v[minindex] = 0;
        }
    } while (minindex < 10000);
    // Вывод кратчайших расстояний до вершин
    printf("\nКратчайшие расстояния до вершин: \n");
    for (int i = 0; i<SIZE; i++)
        printf("%5d ", d[i]);






    // Восстановление пути
    int ver[SIZE]; // массив посещенных вершин
    int end = 4; // индекс конечной вершины = 5 - 1
    ver[0] = end + 1; // начальный элемент - конечная вершина
    int k = 1; // индекс предыдущей вершины
    int weight = d[end]; // вес конечной вершины

    while (end != begin_index) // пока не дошли до начальной вершины
    {
        for (int i = 0; i<SIZE; i++) // просматриваем все вершины
        if (a[i][end] != 0)   // если связь есть
        {
            int temp = weight - a[i][end]; // определяем вес пути из предыдущей вершины
            if (temp == d[i]) // если вес совпал с рассчитанным
            {                 // значит из этой вершины и был переход
            weight = temp; // сохраняем новый вес
            end = i;       // сохраняем предыдущую вершину
            ver[k] = i + 1; // и записываем ее в массив
            k++;
            }
        }
    }
    // Вывод пути (начальная вершина оказалась в конце массива из k элементов)
    printf("\nВывод кратчайшего пути\n");
    for (int i = k - 1; i >= 0; i--)
        printf("%3d ", ver[i]);
    getchar(); getchar();
    return 0;
}